// time complexity O(log5 n) ==> O(logn) hər dəfə dövrdə 5 dəfə azalır >> n = 1/5 n kimi  logaritmik azalır
// Space complexity O(1) 
class Solution {
  int trailingZeroes(int n) {
    int counter = 0;
    while (n >= 5) {
      n ~/= 5;
      counter += n;
    }
    return counter;
  }
}
void main() {
  Solution solution = Solution();
  int n = 30;
  print(solution.trailingZeroes(n));
}



/* burada yanliş olan bir həll göstərəcəm ,bu həll təxminən n = 20 dəyərinə qədər düzgün işləyir amma optimal deyil, 20-dən sonra hesablamada problem yaşayır
bu kodun Time complexitysini  tapsaq while dövrü üçün O(n) , factoriali  stringə çebirəndə O(log(n!)) qədər , string.length qədərdə for iterasiya edir onuda  daxil etsək 
 O(n log n ) qədər olcaq.
Space complexity isə  stringin  uzunluğu  factorial qədərdir 
 O(n log n)
*/
class Solution {
  int? trailingZeroes(int n) {
    int fac = 1;
    int counter = 0;

    while(n>0){
      fac *=n;
      n--;
    }

    String s = fac.toString();

    for(int i = s.length-1 ; i >=0;  i--){
      if(s[i]=='0'){
        counter++;
      }
      if(s[i]!='0'){
        break;
      }

    }
    print(fac);

    return counter;
  }
}
void main(){
  Solution solution = Solution();
  int n = 20;
  print(solution.trailingZeroes(n));
}

*/
