/*
Time complexity : O(N) N ağacada gedilən Nodelərin sayıdır.
Space complexity : O(N) ---> O(p.hündürlüyü + q.hündürlüyü) Ən pis halda belə ola bilər(balansız ağaclarda). Balanslı şəkildə olan ağaclarda O(Log N) ola bilər.
Bu tip məsələlərdə Yaddaş istifadəsi ( rekursiv call stack)-lə bağılıdır.
*/

class TreeNode {
  int val;
  TreeNode? left;
  TreeNode? right;

  TreeNode([this.val = 0, this.left, this.right]);
}

class Solution {
  bool isSameTree(TreeNode? p, TreeNode? q) {
    if (p == null && q == null) return true;
    if (p == null || q == null) return false;
    if (p.val != q.val) return false;
    
    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
  }
}
void main() {
  TreeNode p = TreeNode(
    1,
    TreeNode(2, TreeNode(4), TreeNode(5)),
    TreeNode(3),
  );
 TreeNode q = TreeNode(
    1,
    TreeNode(2, TreeNode(9), TreeNode(5)),
    TreeNode(3),
  );
  Solution solution = Solution();
  print("Is Same: ${solution.isSameTree(p ,q)}");
}
