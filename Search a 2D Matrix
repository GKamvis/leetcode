/*
Time Complexity : O(Log(m * n))  m*n burada sətir və sütünu təmsil edir onlarin hasili cəmi neçə elementin olduğunu tapir.
Space Complexity : O(1) bütün dəyişənlər sabit yer tələb edir.

*/
class Solution {
  bool searchMatrix(List<List<int>> matrix, int target) {
    int m = matrix.length;
    int n = matrix[0].length;

    int l = 0;
    int r = m*n -1;

    while(l <= r){
    int mid = (l + r)~/2;
    int i = mid ~/n;
    int j = mid % n;
    int number = matrix[i][j];

    if(number == target){
        return true;
    }
    else if( number < target){
        l = mid + 1;
    }
    else r = mid -1;
    }

    return false;
    
  }
}
void main() {
var sol = Solution();
  List<List<int>> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]; int target = 3;
  
  print(sol.searchMatrix(matrix , target));
}
